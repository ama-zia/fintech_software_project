"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./lib/forecast.ts":
/*!*************************!*\
  !*** ./lib/forecast.ts ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildDailySeriesFromTransactions: function() { return /* binding */ buildDailySeriesFromTransactions; },\n/* harmony export */   forecast: function() { return /* binding */ forecast; }\n/* harmony export */ });\n// lib/forecast.ts\nfunction parseDateOnly(d) {\n    const t = new Date(d);\n    return new Date(t.getFullYear(), t.getMonth(), t.getDate());\n}\nfunction formatDate(d) {\n    return d.toISOString().slice(0, 10);\n}\n// Build daily series map from transactions (sum amounts per day)\nfunction buildDailySeriesFromTransactions(transactions) {\n    const map = {};\n    transactions.forEach((t)=>{\n        const day = formatDate(parseDateOnly(t.date));\n        map[day] = (map[day] || 0) + t.amount;\n    });\n    return map;\n}\n// Simple linear regression to detect trend\nfunction linearRegression(xs, ys) {\n    const n = xs.length;\n    if (n === 0) return {\n        slope: 0,\n        intercept: 0\n    };\n    const meanX = xs.reduce((a, b)=>a + b, 0) / n;\n    const meanY = ys.reduce((a, b)=>a + b, 0) / n;\n    let num = 0, den = 0;\n    for(let i = 0; i < n; i++){\n        num += (xs[i] - meanX) * (ys[i] - meanY);\n        den += (xs[i] - meanX) * (xs[i] - meanX);\n    }\n    const slope = den === 0 ? 0 : num / den;\n    const intercept = meanY - slope * meanX;\n    return {\n        slope,\n        intercept\n    };\n}\n// Box-Muller for normal samples\nfunction randn() {\n    let mean = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, std = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n    let u = 0, v = 0;\n    while(u === 0)u = Math.random();\n    while(v === 0)v = Math.random();\n    return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v) * std + mean;\n}\n/**\r\n * forecast(transactions, days, scenario)\r\n * - transactions: signed amounts (income positive, expenses negative)\r\n * - scenario: optional map category -> multiplier (0.0..2.0 etc)\r\n *\r\n * returns { points: ForecastPoint[], meta: { avgMonthly, projectedMonthly, ... } }\r\n */ async function forecast(transactions) {\n    let days = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 365, scenario = arguments.length > 2 ? arguments[2] : void 0;\n    // defensive copy / ensure amounts are numbers\n    const txsOriginal = transactions.map((t)=>({\n            ...t,\n            amount: Number(t.amount || 0)\n        }));\n    // ---------- compute historical avgMonthly (baseline) ----------\n    let avgMonthly = 0;\n    if (txsOriginal.length > 0) {\n        const dates = txsOriginal.map((t)=>new Date(t.date));\n        const minDate = new Date(Math.min(...dates.map((d)=>d.getTime())));\n        const maxDate = new Date(Math.max(...dates.map((d)=>d.getTime())));\n        const months = Math.max(1, (maxDate.getFullYear() - minDate.getFullYear()) * 12 + (maxDate.getMonth() - minDate.getMonth() + 1));\n        const total = txsOriginal.reduce((s, t)=>s + t.amount, 0);\n        avgMonthly = total / months;\n    }\n    // ---------- compute baseline monthly per category (for scenario projection) ----------\n    const monthsSpan = (()=>{\n        if (txsOriginal.length === 0) return 1;\n        const dates = txsOriginal.map((t)=>new Date(t.date));\n        const minDate = new Date(Math.min(...dates.map((d)=>d.getTime())));\n        const maxDate = new Date(Math.max(...dates.map((d)=>d.getTime())));\n        return Math.max(1, (maxDate.getFullYear() - minDate.getFullYear()) * 12 + (maxDate.getMonth() - minDate.getMonth() + 1));\n    })();\n    const catTotals = {};\n    txsOriginal.forEach((t)=>{\n        const cat = (t.category || \"__uncategorized\").toString().trim();\n        catTotals[cat] = (catTotals[cat] || 0) + t.amount;\n    });\n    const baselineMonthlyByCategory = {};\n    Object.keys(catTotals).forEach((cat)=>{\n        baselineMonthlyByCategory[cat] = catTotals[cat] / monthsSpan;\n    });\n    // projectedMonthly by applying scenario multipliers to baselineMonthlyByCategory\n    const projectedMonthlyByCategory = Object.keys(baselineMonthlyByCategory).reduce((sum, cat)=>{\n        const multiplier = scenario && cat in scenario ? scenario[cat] : 1;\n        return sum + baselineMonthlyByCategory[cat] * multiplier;\n    }, 0);\n    // ---------- prepare txsAdjusted (apply scenario multipliers to each transaction) ----------\n    // IMPORTANT: do NOT change the sign of t.amount here; CSV should supply signed amounts.\n    const txsAdjusted = txsOriginal.map((t)=>{\n        const multiplier = scenario && t.category && t.category in scenario ? scenario[t.category] : 1;\n        return {\n            ...t,\n            amount: t.amount * multiplier\n        };\n    });\n    // ---------- build daily series from adjusted txs for the chart/model ----------\n    const map = buildDailySeriesFromTransactions(txsAdjusted);\n    const dates = Object.keys(map).sort();\n    // if there's no data, return zeros\n    if (dates.length === 0) {\n        const points = [];\n        const today = new Date();\n        for(let i = 0; i < days; i++){\n            const d = new Date(today);\n            d.setDate(d.getDate() + i);\n            points.push({\n                date: formatDate(d),\n                median: 0,\n                lower: 0,\n                upper: 0\n            });\n        }\n        return {\n            points,\n            meta: {\n                notes: \"no data\",\n                avgMonthly: 0,\n                projectedMonthly: 0\n            }\n        };\n    }\n    // convert to arrays for numerical ops (daily net flows)\n    const values = dates.map((d)=>map[d]);\n    const n = values.length;\n    const xs = values.map((_, i)=>i);\n    // 3) fit linear regression for trend\n    const { slope, intercept } = linearRegression(xs, values);\n    // 4) weekday seasonality: average residual by weekday\n    const weekdaySums = [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ];\n    const weekdayCount = [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ];\n    for(let i = 0; i < n; i++){\n        const d = new Date(dates[i]);\n        const w = d.getDay();\n        const trendAtI = intercept + slope * i;\n        const residual = values[i] - trendAtI;\n        weekdaySums[w] += residual;\n        weekdayCount[w] += 1;\n    }\n    const weekdayAvg = weekdaySums.map((s, i)=>weekdayCount[i] ? s / weekdayCount[i] : 0);\n    // 5) compute residuals distribution (after removing trend+seasonality)\n    const residuals = [];\n    for(let i = 0; i < n; i++){\n        const d = new Date(dates[i]);\n        const w = d.getDay();\n        const pred = intercept + slope * i + weekdayAvg[w];\n        residuals.push(values[i] - pred);\n    }\n    const residMean = residuals.reduce((a, b)=>a + b, 0) / Math.max(1, residuals.length);\n    const residStd = Math.sqrt(residuals.reduce((a, b)=>a + (b - residMean) * (b - residMean), 0) / Math.max(1, residuals.length - 1));\n    // 6) predictive median (deterministic trend+seasonality) + Monte Carlo sims\n    const sims = 300;\n    const runs = []; // simulations x days\n    for(let s = 0; s < sims; s++){\n        const run = [];\n        for(let i = 0; i < days; i++){\n            // future index = n + i\n            const idx = n + i;\n            const base = intercept + slope * idx;\n            // weekday for future day\n            const futDate = new Date(dates[dates.length - 1]);\n            futDate.setDate(futDate.getDate() + 1 + i);\n            const w = futDate.getDay();\n            const seasonal = weekdayAvg[w];\n            // sample residual noise, clamp to ±3σ for stability\n            const noise = Math.max(Math.min(randn(residMean, residStd), residStd * 3), -residStd * 3);\n            run.push(base + seasonal + noise);\n        }\n        runs.push(run);\n    }\n    // compute median and intervals for each day\n    const points = [];\n    for(let dayIdx = 0; dayIdx < days; dayIdx++){\n        const vals = runs.map((r)=>r[dayIdx]).sort((a, b)=>a - b);\n        const median = vals[Math.floor(vals.length / 2)];\n        const lower = vals[Math.floor(vals.length * 0.05)];\n        const upper = vals[Math.floor(vals.length * 0.95)];\n        const futDate = new Date(dates[dates.length - 1]);\n        futDate.setDate(futDate.getDate() + 1 + dayIdx);\n        points.push({\n            date: formatDate(futDate),\n            median,\n            lower,\n            upper\n        });\n    }\n    // forecast-based projected monthly (MC-driven) — keep for diagnostics\n    const first30 = points.slice(0, 30);\n    var _p_median;\n    const forecastDailyAvg = first30.length ? first30.reduce((s, p)=>s + ((_p_median = p.median) !== null && _p_median !== void 0 ? _p_median : 0), 0) / first30.length : 0;\n    const forecastProjectedMonthlyMC = forecastDailyAvg * 30;\n    // final projectedMonthly for UI: use category-based projection (stable + responsive to sliders)\n    const projectedMonthly = projectedMonthlyByCategory;\n    return {\n        points,\n        meta: {\n            slope,\n            intercept,\n            residStd,\n            residualCount: residuals.length,\n            avgMonthly,\n            projectedMonthly,\n            forecastProjectedMonthlyMC\n        }\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/forecast.ts\n"));

/***/ })

});