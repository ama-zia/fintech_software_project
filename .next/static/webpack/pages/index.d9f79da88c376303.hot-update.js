"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./lib/forecast.ts":
/*!*************************!*\
  !*** ./lib/forecast.ts ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildDailySeriesFromTransactions: function() { return /* binding */ buildDailySeriesFromTransactions; },\n/* harmony export */   forecast: function() { return /* binding */ forecast; }\n/* harmony export */ });\n// lib/forecast.ts\nfunction parseDateOnly(d) {\n    const t = new Date(d);\n    return new Date(t.getFullYear(), t.getMonth(), t.getDate());\n}\nfunction formatDate(d) {\n    return d.toISOString().slice(0, 10);\n}\n// Build daily series map from transactions (sum amounts per day)\nfunction buildDailySeriesFromTransactions(transactions) {\n    const map = {};\n    transactions.forEach((t)=>{\n        const day = formatDate(parseDateOnly(t.date));\n        map[day] = (map[day] || 0) + t.amount;\n    });\n    return map;\n}\n// Box-Muller for normal samples\nfunction randn() {\n    let mean = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, std = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n    let u = 0, v = 0;\n    while(u === 0)u = Math.random();\n    while(v === 0)v = Math.random();\n    return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v) * std + mean;\n}\n/**\r\n * forecast(transactions, days, scenario)\r\n * - transactions: signed amounts (income positive, expenses negative)\r\n * - scenario: optional map category -> multiplier (0.0..2.0 etc)\r\n *\r\n * returns { points: ForecastPoint[], meta: { avgMonthly, projectedMonthly, ... } }\r\n */ async function forecast(transactions) {\n    let days = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 365, scenario = arguments.length > 2 ? arguments[2] : void 0;\n    const txsOriginal = transactions.map((t)=>({\n            ...t,\n            amount: Number(t.amount || 0)\n        }));\n    // ---------- compute historical avgMonthly ----------\n    let avgMonthly = 0;\n    if (txsOriginal.length > 0) {\n        const dates = txsOriginal.map((t)=>new Date(t.date));\n        const minDate = new Date(Math.min(...dates.map((d)=>d.getTime())));\n        const maxDate = new Date(Math.max(...dates.map((d)=>d.getTime())));\n        const months = Math.max(1, (maxDate.getFullYear() - minDate.getFullYear()) * 12 + (maxDate.getMonth() - minDate.getMonth() + 1));\n        const total = txsOriginal.reduce((s, t)=>s + t.amount, 0);\n        avgMonthly = total / months;\n    }\n    // ---------- compute baseline monthly per category ----------\n    const monthsSpan = (()=>{\n        if (txsOriginal.length === 0) return 1;\n        const dates = txsOriginal.map((t)=>new Date(t.date));\n        const minDate = new Date(Math.min(...dates.map((d)=>d.getTime())));\n        const maxDate = new Date(Math.max(...dates.map((d)=>d.getTime())));\n        return Math.max(1, (maxDate.getFullYear() - minDate.getFullYear()) * 12 + (maxDate.getMonth() - minDate.getMonth() + 1));\n    })();\n    const catTotals = {};\n    txsOriginal.forEach((t)=>{\n        const cat = (t.category || \"__uncategorized\").toString().trim();\n        catTotals[cat] = (catTotals[cat] || 0) + t.amount;\n    });\n    const baselineMonthlyByCategory = {};\n    Object.keys(catTotals).forEach((cat)=>{\n        baselineMonthlyByCategory[cat] = catTotals[cat] / monthsSpan;\n    });\n    // projectedMonthly by applying scenario multipliers\n    const projectedMonthlyByCategory = Object.keys(baselineMonthlyByCategory).reduce((sum, cat)=>{\n        const multiplier = scenario && cat in scenario ? scenario[cat] : 1;\n        return sum + baselineMonthlyByCategory[cat] * multiplier;\n    }, 0);\n    // ---------- apply scenario multipliers ----------\n    const txsAdjusted = txsOriginal.map((t)=>{\n        const multiplier = scenario && t.category && t.category in scenario ? scenario[t.category] : 1;\n        return {\n            ...t,\n            amount: t.amount * multiplier\n        };\n    });\n    // ---------- build daily net flow ----------\n    const map = buildDailySeriesFromTransactions(txsAdjusted);\n    const dates = Object.keys(map).sort();\n    if (dates.length === 0) {\n        const points = [];\n        const today = new Date();\n        for(let i = 0; i < days; i++){\n            const d = new Date(today);\n            d.setDate(d.getDate() + i);\n            points.push({\n                date: formatDate(d),\n                median: 0,\n                lower: 0,\n                upper: 0\n            });\n        }\n        return {\n            points,\n            meta: {\n                notes: \"no data\",\n                avgMonthly: 0,\n                projectedMonthly: 0\n            }\n        };\n    }\n    // ---------- convert to cumulative balance ----------\n    const dailyValues = dates.map((d)=>map[d]);\n    const cumulative = [];\n    dailyValues.reduce((acc, val)=>{\n        const newVal = acc + val;\n        cumulative.push(newVal);\n        return newVal;\n    }, 0);\n    const lastKnownBalance = cumulative[cumulative.length - 1];\n    // ---------- residual stats for noise ----------\n    const mean = cumulative.reduce((a, b)=>a + b, 0) / cumulative.length;\n    const std = Math.sqrt(cumulative.reduce((a, b)=>a + (b - mean) * (b - mean), 0) / Math.max(1, cumulative.length - 1));\n    // ---------- Monte Carlo sims on cumulative ----------\n    const sims = 300;\n    const runs = [];\n    for(let s = 0; s < sims; s++){\n        const run = [];\n        let bal = lastKnownBalance;\n        for(let i = 0; i < days; i++){\n            // approximate daily drift = avgMonthly/30\n            const dailyDrift = projectedMonthlyByCategory / 30;\n            const noise = Math.max(Math.min(randn(0, std / 10), std), -std);\n            bal = bal + dailyDrift + noise;\n            run.push(bal);\n        }\n        runs.push(run);\n    }\n    // ---------- compute quantiles ----------\n    const points = [];\n    for(let dayIdx = 0; dayIdx < days; dayIdx++){\n        const vals = runs.map((r)=>r[dayIdx]).sort((a, b)=>a - b);\n        const median = vals[Math.floor(vals.length / 2)];\n        const lower = vals[Math.floor(vals.length * 0.05)];\n        const upper = vals[Math.floor(vals.length * 0.95)];\n        const futDate = new Date(dates[dates.length - 1]);\n        futDate.setDate(futDate.getDate() + 1 + dayIdx);\n        points.push({\n            date: formatDate(futDate),\n            median,\n            lower,\n            upper\n        });\n    }\n    // forecast-based projected monthly (for diagnostics)\n    const first30 = points.slice(0, 30);\n    var _p_median;\n    const forecastDailyAvg = first30.length ? first30.reduce((s, p)=>s + ((_p_median = p.median) !== null && _p_median !== void 0 ? _p_median : 0), 0) / first30.length : 0;\n    const forecastProjectedMonthlyMC = forecastDailyAvg * 30;\n    return {\n        points,\n        meta: {\n            avgMonthly,\n            projectedMonthly: projectedMonthlyByCategory,\n            forecastProjectedMonthlyMC\n        }\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/forecast.ts\n"));

/***/ })

});