"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/forecast";
exports.ids = ["pages/api/forecast"];
exports.modules = {

/***/ "(api)/./lib/forecast.ts":
/*!*************************!*\
  !*** ./lib/forecast.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildDailySeriesFromTransactions: () => (/* binding */ buildDailySeriesFromTransactions),\n/* harmony export */   forecast: () => (/* binding */ forecast)\n/* harmony export */ });\n// lib/forecast.ts\nfunction parseDateOnly(d) {\n    const t = new Date(d);\n    return new Date(t.getFullYear(), t.getMonth(), t.getDate());\n}\nfunction formatDate(d) {\n    return d.toISOString().slice(0, 10);\n}\n// Build daily series map from transactions (sum amounts per day)\nfunction buildDailySeriesFromTransactions(transactions) {\n    const map = {};\n    transactions.forEach((t)=>{\n        const day = formatDate(parseDateOnly(t.date));\n        map[day] = (map[day] || 0) + t.amount;\n    });\n    return map;\n}\n// Box-Muller for normal samples\nfunction randn(mean = 0, std = 1) {\n    let u = 0, v = 0;\n    while(u === 0)u = Math.random();\n    while(v === 0)v = Math.random();\n    return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v) * std + mean;\n}\n/**\r\n * forecast(transactions, days, scenario)\r\n * - transactions: signed amounts (income positive, expenses negative)\r\n * - scenario: optional map category -> multiplier (0.0..2.0 etc)\r\n *\r\n * returns { points: ForecastPoint[], meta: { avgMonthly, projectedMonthly, ... } }\r\n */ async function forecast(transactions, days = 365, scenario) {\n    const txsOriginal = transactions.map((t)=>({\n            ...t,\n            amount: Number(t.amount || 0)\n        }));\n    // ---------- compute historical avgMonthly ----------\n    let avgMonthly = 0;\n    if (txsOriginal.length > 0) {\n        const dates = txsOriginal.map((t)=>new Date(t.date));\n        const minDate = new Date(Math.min(...dates.map((d)=>d.getTime())));\n        const maxDate = new Date(Math.max(...dates.map((d)=>d.getTime())));\n        const months = Math.max(1, (maxDate.getFullYear() - minDate.getFullYear()) * 12 + (maxDate.getMonth() - minDate.getMonth() + 1));\n        const total = txsOriginal.reduce((s, t)=>s + t.amount, 0);\n        avgMonthly = total / months;\n    }\n    // ---------- compute baseline monthly per category ----------\n    const monthsSpan = (()=>{\n        if (txsOriginal.length === 0) return 1;\n        const dates = txsOriginal.map((t)=>new Date(t.date));\n        const minDate = new Date(Math.min(...dates.map((d)=>d.getTime())));\n        const maxDate = new Date(Math.max(...dates.map((d)=>d.getTime())));\n        return Math.max(1, (maxDate.getFullYear() - minDate.getFullYear()) * 12 + (maxDate.getMonth() - minDate.getMonth() + 1));\n    })();\n    const catTotals = {};\n    txsOriginal.forEach((t)=>{\n        const cat = (t.category || \"__uncategorized\").toString().trim();\n        catTotals[cat] = (catTotals[cat] || 0) + t.amount;\n    });\n    const baselineMonthlyByCategory = {};\n    Object.keys(catTotals).forEach((cat)=>{\n        baselineMonthlyByCategory[cat] = catTotals[cat] / monthsSpan;\n    });\n    // projectedMonthly by applying scenario multipliers\n    const projectedMonthlyByCategory = Object.keys(baselineMonthlyByCategory).reduce((sum, cat)=>{\n        const multiplier = scenario && cat in scenario ? scenario[cat] : 1;\n        return sum + baselineMonthlyByCategory[cat] * multiplier;\n    }, 0);\n    // ---------- apply scenario multipliers ----------\n    const txsAdjusted = txsOriginal.map((t)=>{\n        const multiplier = scenario && t.category && t.category in scenario ? scenario[t.category] : 1;\n        return {\n            ...t,\n            amount: t.amount * multiplier\n        };\n    });\n    // ---------- build daily net flow ----------\n    const map = buildDailySeriesFromTransactions(txsAdjusted);\n    const dates = Object.keys(map).sort();\n    if (dates.length === 0) {\n        const points = [];\n        const today = new Date();\n        for(let i = 0; i < days; i++){\n            const d = new Date(today);\n            d.setDate(d.getDate() + i);\n            points.push({\n                date: formatDate(d),\n                median: 0,\n                lower: 0,\n                upper: 0\n            });\n        }\n        return {\n            points,\n            meta: {\n                notes: \"no data\",\n                avgMonthly: 0,\n                projectedMonthly: 0\n            }\n        };\n    }\n    // ---------- convert to cumulative balance ----------\n    const dailyValues = dates.map((d)=>map[d]);\n    const cumulative = [];\n    dailyValues.reduce((acc, val)=>{\n        const newVal = acc + val;\n        cumulative.push(newVal);\n        return newVal;\n    }, 0);\n    const lastKnownBalance = cumulative[cumulative.length - 1];\n    // ---------- residual stats for noise ----------\n    const mean = cumulative.reduce((a, b)=>a + b, 0) / cumulative.length;\n    const std = Math.sqrt(cumulative.reduce((a, b)=>a + (b - mean) * (b - mean), 0) / Math.max(1, cumulative.length - 1));\n    // ---------- Monte Carlo sims on cumulative ----------\n    const sims = 300;\n    const runs = [];\n    for(let s = 0; s < sims; s++){\n        const run = [];\n        let bal = lastKnownBalance;\n        for(let i = 0; i < days; i++){\n            // approximate daily drift = avgMonthly/30\n            const dailyDrift = projectedMonthlyByCategory / 30;\n            const noise = Math.max(Math.min(randn(0, std / 10), std), -std);\n            bal = bal + dailyDrift + noise;\n            run.push(bal);\n        }\n        runs.push(run);\n    }\n    // ---------- compute quantiles ----------\n    const points = [];\n    for(let dayIdx = 0; dayIdx < days; dayIdx++){\n        const vals = runs.map((r)=>r[dayIdx]).sort((a, b)=>a - b);\n        const median = vals[Math.floor(vals.length / 2)];\n        const lower = vals[Math.floor(vals.length * 0.05)];\n        const upper = vals[Math.floor(vals.length * 0.95)];\n        const futDate = new Date(dates[dates.length - 1]);\n        futDate.setDate(futDate.getDate() + 1 + dayIdx);\n        points.push({\n            date: formatDate(futDate),\n            median,\n            lower,\n            upper\n        });\n    }\n    // forecast-based projected monthly (for diagnostics)\n    const first30 = points.slice(0, 30);\n    const forecastDailyAvg = first30.length ? first30.reduce((s, p)=>s + (p.median ?? 0), 0) / first30.length : 0;\n    const forecastProjectedMonthlyMC = forecastDailyAvg * 30;\n    return {\n        points,\n        meta: {\n            avgMonthly,\n            projectedMonthly: projectedMonthlyByCategory,\n            forecastProjectedMonthlyMC\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/forecast.ts\n");

/***/ }),

/***/ "(api)/./pages/api/forecast.ts":
/*!*******************************!*\
  !*** ./pages/api/forecast.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_forecast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/forecast */ \"(api)/./lib/forecast.ts\");\n\nasync function handler(req, res) {\n    if (req.method !== \"POST\") return res.status(405).end();\n    try {\n        const body = req.body;\n        const transactions = body.transactions ?? [];\n        const days = body.days ?? 365;\n        const scenario = body.scenario;\n        const result = await (0,_lib_forecast__WEBPACK_IMPORTED_MODULE_0__.forecast)(transactions, days, scenario);\n        res.status(200).json(result);\n    } catch (err) {\n        console.error(err);\n        res.status(500).json({\n            error: String(err?.message ?? err)\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvZm9yZWNhc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDOEM7QUFHL0IsZUFBZUMsUUFBUUMsR0FBbUIsRUFBRUMsR0FBb0I7SUFDN0UsSUFBSUQsSUFBSUUsTUFBTSxLQUFLLFFBQVEsT0FBT0QsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLEdBQUc7SUFDckQsSUFBSTtRQUNGLE1BQU1DLE9BQU9MLElBQUlLLElBQUk7UUFDckIsTUFBTUMsZUFBZUQsS0FBS0MsWUFBWSxJQUFJLEVBQUU7UUFDNUMsTUFBTUMsT0FBT0YsS0FBS0UsSUFBSSxJQUFJO1FBQzFCLE1BQU1DLFdBQVdILEtBQUtHLFFBQVE7UUFDOUIsTUFBTUMsU0FBUyxNQUFNWCx1REFBUUEsQ0FBQ1EsY0FBY0MsTUFBTUM7UUFDbERQLElBQUlFLE1BQU0sQ0FBQyxLQUFLTyxJQUFJLENBQUNEO0lBQ3ZCLEVBQUUsT0FBT0UsS0FBVTtRQUNqQkMsUUFBUUMsS0FBSyxDQUFDRjtRQUNkVixJQUFJRSxNQUFNLENBQUMsS0FBS08sSUFBSSxDQUFDO1lBQUVHLE9BQU9DLE9BQU9ILEtBQUtJLFdBQVdKO1FBQUs7SUFDNUQ7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpbmFuY2lhbC1kaWdpdGFsLXR3aW4vLi9wYWdlcy9hcGkvZm9yZWNhc3QudHM/Y2MzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tIFwibmV4dFwiO1xyXG5pbXBvcnQgeyBmb3JlY2FzdCB9IGZyb20gXCIuLi8uLi9saWIvZm9yZWNhc3RcIjtcclxuaW1wb3J0IHsgVHJhbnNhY3Rpb24sIFNjZW5hcmlvRGVsdGEgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UpIHtcclxuICBpZiAocmVxLm1ldGhvZCAhPT0gXCJQT1NUXCIpIHJldHVybiByZXMuc3RhdHVzKDQwNSkuZW5kKCk7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGJvZHkgPSByZXEuYm9keSBhcyB7IHRyYW5zYWN0aW9ucz86IFRyYW5zYWN0aW9uW107IGRheXM/OiBudW1iZXI7IHNjZW5hcmlvPzogU2NlbmFyaW9EZWx0YSB9O1xyXG4gICAgY29uc3QgdHJhbnNhY3Rpb25zID0gYm9keS50cmFuc2FjdGlvbnMgPz8gW107XHJcbiAgICBjb25zdCBkYXlzID0gYm9keS5kYXlzID8/IDM2NTtcclxuICAgIGNvbnN0IHNjZW5hcmlvID0gYm9keS5zY2VuYXJpbztcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZvcmVjYXN0KHRyYW5zYWN0aW9ucywgZGF5cywgc2NlbmFyaW8pO1xyXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24ocmVzdWx0KTtcclxuICB9IGNhdGNoIChlcnI6IGFueSkge1xyXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogU3RyaW5nKGVycj8ubWVzc2FnZSA/PyBlcnIpIH0pO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsiZm9yZWNhc3QiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwibWV0aG9kIiwic3RhdHVzIiwiZW5kIiwiYm9keSIsInRyYW5zYWN0aW9ucyIsImRheXMiLCJzY2VuYXJpbyIsInJlc3VsdCIsImpzb24iLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJTdHJpbmciLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./pages/api/forecast.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/forecast.ts"));
module.exports = __webpack_exports__;

})();