"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/forecast";
exports.ids = ["pages/api/forecast"];
exports.modules = {

/***/ "(api)/./lib/forecast.ts":
/*!*************************!*\
  !*** ./lib/forecast.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildDailySeriesFromTransactions: () => (/* binding */ buildDailySeriesFromTransactions),\n/* harmony export */   forecast: () => (/* binding */ forecast)\n/* harmony export */ });\n// lib/forecast.ts\nfunction parseDateOnly(d) {\n    const t = new Date(d);\n    return new Date(t.getFullYear(), t.getMonth(), t.getDate());\n}\nfunction formatDate(d) {\n    return d.toISOString().slice(0, 10);\n}\n// Build daily series map from transactions (sum amounts per day)\nfunction buildDailySeriesFromTransactions(transactions) {\n    const map = {};\n    transactions.forEach((t)=>{\n        const day = formatDate(parseDateOnly(t.date));\n        map[day] = (map[day] || 0) + t.amount;\n    });\n    return map;\n}\n// Simple linear regression to detect trend\nfunction linearRegression(xs, ys) {\n    const n = xs.length;\n    if (n === 0) return {\n        slope: 0,\n        intercept: 0\n    };\n    const meanX = xs.reduce((a, b)=>a + b, 0) / n;\n    const meanY = ys.reduce((a, b)=>a + b, 0) / n;\n    let num = 0, den = 0;\n    for(let i = 0; i < n; i++){\n        num += (xs[i] - meanX) * (ys[i] - meanY);\n        den += (xs[i] - meanX) * (xs[i] - meanX);\n    }\n    const slope = den === 0 ? 0 : num / den;\n    const intercept = meanY - slope * meanX;\n    return {\n        slope,\n        intercept\n    };\n}\n// Box-Muller for normal samples\nfunction randn(mean = 0, std = 1) {\n    let u = 0, v = 0;\n    while(u === 0)u = Math.random();\n    while(v === 0)v = Math.random();\n    return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v) * std + mean;\n}\n/**\r\n * forecast(transactions, days, scenario)\r\n * - transactions: signed amounts (income positive, expenses negative)\r\n * - scenario: optional map category -> multiplier (0.0..2.0 etc)\r\n *\r\n * returns { points: ForecastPoint[], meta: { avgMonthly, projectedMonthly, ... } }\r\n */ async function forecast(transactions, days = 365, scenario) {\n    // defensive copy / ensure amounts are numbers\n    const txsOriginal = transactions.map((t)=>({\n            ...t,\n            amount: Number(t.amount || 0)\n        }));\n    // ---------- compute historical avgMonthly (baseline) ----------\n    let avgMonthly = 0;\n    if (txsOriginal.length > 0) {\n        const dates = txsOriginal.map((t)=>new Date(t.date));\n        const minDate = new Date(Math.min(...dates.map((d)=>d.getTime())));\n        const maxDate = new Date(Math.max(...dates.map((d)=>d.getTime())));\n        const months = Math.max(1, (maxDate.getFullYear() - minDate.getFullYear()) * 12 + (maxDate.getMonth() - minDate.getMonth() + 1));\n        const total = txsOriginal.reduce((s, t)=>s + t.amount, 0);\n        avgMonthly = total / months;\n    }\n    // ---------- compute baseline monthly per category (for scenario projection) ----------\n    const monthsSpan = (()=>{\n        if (txsOriginal.length === 0) return 1;\n        const dates = txsOriginal.map((t)=>new Date(t.date));\n        const minDate = new Date(Math.min(...dates.map((d)=>d.getTime())));\n        const maxDate = new Date(Math.max(...dates.map((d)=>d.getTime())));\n        return Math.max(1, (maxDate.getFullYear() - minDate.getFullYear()) * 12 + (maxDate.getMonth() - minDate.getMonth() + 1));\n    })();\n    const catTotals = {};\n    txsOriginal.forEach((t)=>{\n        const cat = (t.category || \"__uncategorized\").toString().trim();\n        catTotals[cat] = (catTotals[cat] || 0) + t.amount;\n    });\n    const baselineMonthlyByCategory = {};\n    Object.keys(catTotals).forEach((cat)=>{\n        baselineMonthlyByCategory[cat] = catTotals[cat] / monthsSpan;\n    });\n    // projectedMonthly by applying scenario multipliers to baselineMonthlyByCategory\n    const projectedMonthlyByCategory = Object.keys(baselineMonthlyByCategory).reduce((sum, cat)=>{\n        const multiplier = scenario && cat in scenario ? scenario[cat] : 1;\n        return sum + baselineMonthlyByCategory[cat] * multiplier;\n    }, 0);\n    // ---------- prepare txsAdjusted (apply scenario multipliers to each transaction) ----------\n    // IMPORTANT: do NOT change the sign of t.amount here; CSV should supply signed amounts.\n    const txsAdjusted = txsOriginal.map((t)=>{\n        const multiplier = scenario && t.category && t.category in scenario ? scenario[t.category] : 1;\n        return {\n            ...t,\n            amount: t.amount * multiplier\n        };\n    });\n    // ---------- build daily series from adjusted txs for the chart/model ----------\n    const map = buildDailySeriesFromTransactions(txsAdjusted);\n    const dates = Object.keys(map).sort();\n    // if there's no data, return zeros\n    if (dates.length === 0) {\n        const points = [];\n        const today = new Date();\n        for(let i = 0; i < days; i++){\n            const d = new Date(today);\n            d.setDate(d.getDate() + i);\n            points.push({\n                date: formatDate(d),\n                median: 0,\n                lower: 0,\n                upper: 0\n            });\n        }\n        return {\n            points,\n            meta: {\n                notes: \"no data\",\n                avgMonthly: 0,\n                projectedMonthly: 0\n            }\n        };\n    }\n    // convert to arrays for numerical ops (daily net flows)\n    const values = dates.map((d)=>map[d]);\n    const n = values.length;\n    const xs = values.map((_, i)=>i);\n    // 3) fit linear regression for trend\n    const { slope, intercept } = linearRegression(xs, values);\n    // 4) weekday seasonality: average residual by weekday\n    const weekdaySums = [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ];\n    const weekdayCount = [\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ];\n    for(let i = 0; i < n; i++){\n        const d = new Date(dates[i]);\n        const w = d.getDay();\n        const trendAtI = intercept + slope * i;\n        const residual = values[i] - trendAtI;\n        weekdaySums[w] += residual;\n        weekdayCount[w] += 1;\n    }\n    const weekdayAvg = weekdaySums.map((s, i)=>weekdayCount[i] ? s / weekdayCount[i] : 0);\n    // 5) compute residuals distribution (after removing trend+seasonality)\n    const residuals = [];\n    for(let i = 0; i < n; i++){\n        const d = new Date(dates[i]);\n        const w = d.getDay();\n        const pred = intercept + slope * i + weekdayAvg[w];\n        residuals.push(values[i] - pred);\n    }\n    const residMean = residuals.reduce((a, b)=>a + b, 0) / Math.max(1, residuals.length);\n    const residStd = Math.sqrt(residuals.reduce((a, b)=>a + (b - residMean) * (b - residMean), 0) / Math.max(1, residuals.length - 1));\n    // 6) predictive median (deterministic trend+seasonality) + Monte Carlo sims\n    const sims = 300;\n    const runs = []; // simulations x days\n    for(let s = 0; s < sims; s++){\n        const run = [];\n        for(let i = 0; i < days; i++){\n            // future index = n + i\n            const idx = n + i;\n            const base = intercept + slope * idx;\n            // weekday for future day\n            const futDate = new Date(dates[dates.length - 1]);\n            futDate.setDate(futDate.getDate() + 1 + i);\n            const w = futDate.getDay();\n            const seasonal = weekdayAvg[w];\n            // sample residual noise, clamp to ±3σ for stability\n            const noise = Math.max(Math.min(randn(residMean, residStd), residStd * 3), -residStd * 3);\n            run.push(base + seasonal + noise);\n        }\n        runs.push(run);\n    }\n    // compute median and intervals for each day\n    const points = [];\n    for(let dayIdx = 0; dayIdx < days; dayIdx++){\n        const vals = runs.map((r)=>r[dayIdx]).sort((a, b)=>a - b);\n        const median = vals[Math.floor(vals.length / 2)];\n        const lower = vals[Math.floor(vals.length * 0.05)];\n        const upper = vals[Math.floor(vals.length * 0.95)];\n        const futDate = new Date(dates[dates.length - 1]);\n        futDate.setDate(futDate.getDate() + 1 + dayIdx);\n        points.push({\n            date: formatDate(futDate),\n            median,\n            lower,\n            upper\n        });\n    }\n    // forecast-based projected monthly (MC-driven) — keep for diagnostics\n    const first30 = points.slice(0, 30);\n    const forecastDailyAvg = first30.length ? first30.reduce((s, p)=>s + (p.median ?? 0), 0) / first30.length : 0;\n    const forecastProjectedMonthlyMC = forecastDailyAvg * 30;\n    // final projectedMonthly for UI: use category-based projection (stable + responsive to sliders)\n    const projectedMonthly = projectedMonthlyByCategory;\n    return {\n        points,\n        meta: {\n            slope,\n            intercept,\n            residStd,\n            residualCount: residuals.length,\n            avgMonthly,\n            projectedMonthly,\n            forecastProjectedMonthlyMC\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aUc7UUFDeEMvQixPQUFPRyxJQUFJLENBQUM7WUFBRTVELE1BQU1SLFdBQVc2RjtZQUFVeEI7WUFBUUM7WUFBT0M7UUFBTTtJQUNoRTtJQUVBLHNFQUFzRTtJQUN0RSxNQUFNNkIsVUFBVW5DLE9BQU8vRCxLQUFLLENBQUMsR0FBRztJQUNoQyxNQUFNbUcsbUJBQW1CRCxRQUFRdEYsTUFBTSxHQUFJc0YsUUFBUWxGLE1BQU0sQ0FBQyxDQUFDZ0MsR0FBRW9ELElBQUlwRCxJQUFLb0QsQ0FBQUEsRUFBRWpDLE1BQU0sSUFBSSxJQUFJLEtBQUsrQixRQUFRdEYsTUFBTSxHQUFJO0lBQzdHLE1BQU15Riw2QkFBNkJGLG1CQUFtQjtJQUV0RCxnR0FBZ0c7SUFDaEcsTUFBTTNCLG1CQUFtQmQ7SUFFekIsT0FBTztRQUNMSztRQUNBTyxNQUFNO1lBQ0p6RDtZQUNBQztZQUNBdUU7WUFDQWlCLGVBQWVwQixVQUFVdEUsTUFBTTtZQUMvQjJCO1lBQ0FpQztZQUNBNkI7UUFDRjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maW5hbmNpYWwtZGlnaXRhbC10d2luLy4vbGliL2ZvcmVjYXN0LnRzPzU2Y2EiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbGliL2ZvcmVjYXN0LnRzXHJcbmltcG9ydCB7IFRyYW5zYWN0aW9uLCBTY2VuYXJpb0RlbHRhIH0gZnJvbSBcIi4uL3R5cGVzXCI7XHJcblxyXG50eXBlIFNlcmllc1BvaW50ID0geyBkYXRlOiBzdHJpbmc7IHZhbHVlOiBudW1iZXIgfTtcclxuZXhwb3J0IHR5cGUgRm9yZWNhc3RQb2ludCA9IHsgZGF0ZTogc3RyaW5nOyBtZWRpYW46IG51bWJlcjsgbG93ZXI6IG51bWJlcjsgdXBwZXI6IG51bWJlciB9O1xyXG5cclxuZnVuY3Rpb24gcGFyc2VEYXRlT25seShkOiBzdHJpbmcpIHtcclxuICBjb25zdCB0ID0gbmV3IERhdGUoZCk7XHJcbiAgcmV0dXJuIG5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSwgdC5nZXRNb250aCgpLCB0LmdldERhdGUoKSk7XHJcbn1cclxuZnVuY3Rpb24gZm9ybWF0RGF0ZShkOiBEYXRlKSB7XHJcbiAgcmV0dXJuIGQudG9JU09TdHJpbmcoKS5zbGljZSgwLDEwKTtcclxufVxyXG5cclxuLy8gQnVpbGQgZGFpbHkgc2VyaWVzIG1hcCBmcm9tIHRyYW5zYWN0aW9ucyAoc3VtIGFtb3VudHMgcGVyIGRheSlcclxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRGFpbHlTZXJpZXNGcm9tVHJhbnNhY3Rpb25zKHRyYW5zYWN0aW9uczogVHJhbnNhY3Rpb25bXSkgOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+IHtcclxuICBjb25zdCBtYXA6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcclxuICB0cmFuc2FjdGlvbnMuZm9yRWFjaCh0ID0+IHtcclxuICAgIGNvbnN0IGRheSA9IGZvcm1hdERhdGUocGFyc2VEYXRlT25seSh0LmRhdGUpKTtcclxuICAgIG1hcFtkYXldID0gKG1hcFtkYXldIHx8IDApICsgdC5hbW91bnQ7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIG1hcDtcclxufVxyXG5cclxuLy8gU2ltcGxlIGxpbmVhciByZWdyZXNzaW9uIHRvIGRldGVjdCB0cmVuZFxyXG5mdW5jdGlvbiBsaW5lYXJSZWdyZXNzaW9uKHhzOiBudW1iZXJbXSwgeXM6IG51bWJlcltdKSB7XHJcbiAgY29uc3QgbiA9IHhzLmxlbmd0aDtcclxuICBpZiAobiA9PT0gMCkgcmV0dXJuIHsgc2xvcGU6IDAsIGludGVyY2VwdDogMCB9O1xyXG4gIGNvbnN0IG1lYW5YID0geHMucmVkdWNlKChhLGIpPT5hK2IsMCkvbjtcclxuICBjb25zdCBtZWFuWSA9IHlzLnJlZHVjZSgoYSxiKT0+YStiLDApL247XHJcbiAgbGV0IG51bSA9IDAsIGRlbiA9IDA7XHJcbiAgZm9yIChsZXQgaT0wO2k8bjtpKyspe1xyXG4gICAgbnVtICs9ICh4c1tpXS1tZWFuWCkqKHlzW2ldLW1lYW5ZKTtcclxuICAgIGRlbiArPSAoeHNbaV0tbWVhblgpKih4c1tpXS1tZWFuWCk7XHJcbiAgfVxyXG4gIGNvbnN0IHNsb3BlID0gZGVuID09PSAwID8gMCA6IG51bS9kZW47XHJcbiAgY29uc3QgaW50ZXJjZXB0ID0gbWVhblkgLSBzbG9wZSptZWFuWDtcclxuICByZXR1cm4geyBzbG9wZSwgaW50ZXJjZXB0IH07XHJcbn1cclxuXHJcbi8vIEJveC1NdWxsZXIgZm9yIG5vcm1hbCBzYW1wbGVzXHJcbmZ1bmN0aW9uIHJhbmRuKG1lYW49MCwgc3RkPTEpIHtcclxuICBsZXQgdSA9IDAsIHYgPSAwO1xyXG4gIHdoaWxlKHUgPT09IDApIHUgPSBNYXRoLnJhbmRvbSgpO1xyXG4gIHdoaWxlKHYgPT09IDApIHYgPSBNYXRoLnJhbmRvbSgpO1xyXG4gIHJldHVybiBNYXRoLnNxcnQoLTIuMCAqIE1hdGgubG9nKHUpKSAqIE1hdGguY29zKDIuMCAqIE1hdGguUEkgKiB2KSAqIHN0ZCArIG1lYW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBmb3JlY2FzdCh0cmFuc2FjdGlvbnMsIGRheXMsIHNjZW5hcmlvKVxyXG4gKiAtIHRyYW5zYWN0aW9uczogc2lnbmVkIGFtb3VudHMgKGluY29tZSBwb3NpdGl2ZSwgZXhwZW5zZXMgbmVnYXRpdmUpXHJcbiAqIC0gc2NlbmFyaW86IG9wdGlvbmFsIG1hcCBjYXRlZ29yeSAtPiBtdWx0aXBsaWVyICgwLjAuLjIuMCBldGMpXHJcbiAqXHJcbiAqIHJldHVybnMgeyBwb2ludHM6IEZvcmVjYXN0UG9pbnRbXSwgbWV0YTogeyBhdmdNb250aGx5LCBwcm9qZWN0ZWRNb250aGx5LCAuLi4gfSB9XHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZm9yZWNhc3QodHJhbnNhY3Rpb25zOiBUcmFuc2FjdGlvbltdLCBkYXlzID0gMzY1LCBzY2VuYXJpbz86IFNjZW5hcmlvRGVsdGEpIHtcclxuICAvLyBkZWZlbnNpdmUgY29weSAvIGVuc3VyZSBhbW91bnRzIGFyZSBudW1iZXJzXHJcbiAgY29uc3QgdHhzT3JpZ2luYWwgPSB0cmFuc2FjdGlvbnMubWFwKHQgPT4gKHsgLi4udCwgYW1vdW50OiBOdW1iZXIodC5hbW91bnQgfHwgMCkgfSkpO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tIGNvbXB1dGUgaGlzdG9yaWNhbCBhdmdNb250aGx5IChiYXNlbGluZSkgLS0tLS0tLS0tLVxyXG4gIGxldCBhdmdNb250aGx5ID0gMDtcclxuICBpZiAodHhzT3JpZ2luYWwubGVuZ3RoID4gMCkge1xyXG4gICAgY29uc3QgZGF0ZXMgPSB0eHNPcmlnaW5hbC5tYXAodCA9PiBuZXcgRGF0ZSh0LmRhdGUpKTtcclxuICAgIGNvbnN0IG1pbkRhdGUgPSBuZXcgRGF0ZShNYXRoLm1pbiguLi5kYXRlcy5tYXAoZCA9PiBkLmdldFRpbWUoKSkpKTtcclxuICAgIGNvbnN0IG1heERhdGUgPSBuZXcgRGF0ZShNYXRoLm1heCguLi5kYXRlcy5tYXAoZCA9PiBkLmdldFRpbWUoKSkpKTtcclxuICAgIGNvbnN0IG1vbnRocyA9IE1hdGgubWF4KDEsIChtYXhEYXRlLmdldEZ1bGxZZWFyKCkgLSBtaW5EYXRlLmdldEZ1bGxZZWFyKCkpICogMTIgKyAobWF4RGF0ZS5nZXRNb250aCgpIC0gbWluRGF0ZS5nZXRNb250aCgpICsgMSkpO1xyXG4gICAgY29uc3QgdG90YWwgPSB0eHNPcmlnaW5hbC5yZWR1Y2UoKHMsdCkgPT4gcyArIHQuYW1vdW50LCAwKTtcclxuICAgIGF2Z01vbnRobHkgPSB0b3RhbCAvIG1vbnRocztcclxuICB9XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0gY29tcHV0ZSBiYXNlbGluZSBtb250aGx5IHBlciBjYXRlZ29yeSAoZm9yIHNjZW5hcmlvIHByb2plY3Rpb24pIC0tLS0tLS0tLS1cclxuICBjb25zdCBtb250aHNTcGFuID0gKCgpID0+IHtcclxuICAgIGlmICh0eHNPcmlnaW5hbC5sZW5ndGggPT09IDApIHJldHVybiAxO1xyXG4gICAgY29uc3QgZGF0ZXMgPSB0eHNPcmlnaW5hbC5tYXAodCA9PiBuZXcgRGF0ZSh0LmRhdGUpKTtcclxuICAgIGNvbnN0IG1pbkRhdGUgPSBuZXcgRGF0ZShNYXRoLm1pbiguLi5kYXRlcy5tYXAoZCA9PiBkLmdldFRpbWUoKSkpKTtcclxuICAgIGNvbnN0IG1heERhdGUgPSBuZXcgRGF0ZShNYXRoLm1heCguLi5kYXRlcy5tYXAoZCA9PiBkLmdldFRpbWUoKSkpKTtcclxuICAgIHJldHVybiBNYXRoLm1heCgxLCAobWF4RGF0ZS5nZXRGdWxsWWVhcigpIC0gbWluRGF0ZS5nZXRGdWxsWWVhcigpKSAqIDEyICsgKG1heERhdGUuZ2V0TW9udGgoKSAtIG1pbkRhdGUuZ2V0TW9udGgoKSArIDEpKTtcclxuICB9KSgpO1xyXG5cclxuICBjb25zdCBjYXRUb3RhbHM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcclxuICB0eHNPcmlnaW5hbC5mb3JFYWNoKHQgPT4ge1xyXG4gICAgY29uc3QgY2F0ID0gKHQuY2F0ZWdvcnkgfHwgXCJfX3VuY2F0ZWdvcml6ZWRcIikudG9TdHJpbmcoKS50cmltKCk7XHJcbiAgICBjYXRUb3RhbHNbY2F0XSA9IChjYXRUb3RhbHNbY2F0XSB8fCAwKSArIHQuYW1vdW50O1xyXG4gIH0pO1xyXG4gIGNvbnN0IGJhc2VsaW5lTW9udGhseUJ5Q2F0ZWdvcnk6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcclxuICBPYmplY3Qua2V5cyhjYXRUb3RhbHMpLmZvckVhY2goY2F0ID0+IHtcclxuICAgIGJhc2VsaW5lTW9udGhseUJ5Q2F0ZWdvcnlbY2F0XSA9IGNhdFRvdGFsc1tjYXRdIC8gbW9udGhzU3BhbjtcclxuICB9KTtcclxuXHJcbiAgLy8gcHJvamVjdGVkTW9udGhseSBieSBhcHBseWluZyBzY2VuYXJpbyBtdWx0aXBsaWVycyB0byBiYXNlbGluZU1vbnRobHlCeUNhdGVnb3J5XHJcbiAgY29uc3QgcHJvamVjdGVkTW9udGhseUJ5Q2F0ZWdvcnkgPSBPYmplY3Qua2V5cyhiYXNlbGluZU1vbnRobHlCeUNhdGVnb3J5KS5yZWR1Y2UoKHN1bSwgY2F0KSA9PiB7XHJcbiAgICBjb25zdCBtdWx0aXBsaWVyID0gc2NlbmFyaW8gJiYgKGNhdCBpbiBzY2VuYXJpbykgPyAoc2NlbmFyaW8gYXMgYW55KVtjYXRdIDogMTtcclxuICAgIHJldHVybiBzdW0gKyBiYXNlbGluZU1vbnRobHlCeUNhdGVnb3J5W2NhdF0gKiBtdWx0aXBsaWVyO1xyXG4gIH0sIDApO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tIHByZXBhcmUgdHhzQWRqdXN0ZWQgKGFwcGx5IHNjZW5hcmlvIG11bHRpcGxpZXJzIHRvIGVhY2ggdHJhbnNhY3Rpb24pIC0tLS0tLS0tLS1cclxuICAvLyBJTVBPUlRBTlQ6IGRvIE5PVCBjaGFuZ2UgdGhlIHNpZ24gb2YgdC5hbW91bnQgaGVyZTsgQ1NWIHNob3VsZCBzdXBwbHkgc2lnbmVkIGFtb3VudHMuXHJcbiAgY29uc3QgdHhzQWRqdXN0ZWQgPSB0eHNPcmlnaW5hbC5tYXAodCA9PiB7XHJcbiAgICBjb25zdCBtdWx0aXBsaWVyID0gc2NlbmFyaW8gJiYgdC5jYXRlZ29yeSAmJiAodC5jYXRlZ29yeSBpbiBzY2VuYXJpbykgPyAoc2NlbmFyaW8gYXMgYW55KVt0LmNhdGVnb3J5XSA6IDE7XHJcbiAgICByZXR1cm4geyAuLi50LCBhbW91bnQ6IHQuYW1vdW50ICogbXVsdGlwbGllciB9O1xyXG4gIH0pO1xyXG5cclxuICAvLyAtLS0tLS0tLS0tIGJ1aWxkIGRhaWx5IHNlcmllcyBmcm9tIGFkanVzdGVkIHR4cyBmb3IgdGhlIGNoYXJ0L21vZGVsIC0tLS0tLS0tLS1cclxuICBjb25zdCBtYXAgPSBidWlsZERhaWx5U2VyaWVzRnJvbVRyYW5zYWN0aW9ucyh0eHNBZGp1c3RlZCk7XHJcbiAgY29uc3QgZGF0ZXMgPSBPYmplY3Qua2V5cyhtYXApLnNvcnQoKTtcclxuXHJcbiAgLy8gaWYgdGhlcmUncyBubyBkYXRhLCByZXR1cm4gemVyb3NcclxuICBpZiAoZGF0ZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICBjb25zdCBwb2ludHM6IEZvcmVjYXN0UG9pbnRbXSA9IFtdO1xyXG4gICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgZm9yIChsZXQgaT0wO2k8ZGF5cztpKyspe1xyXG4gICAgICBjb25zdCBkID0gbmV3IERhdGUodG9kYXkpO1xyXG4gICAgICBkLnNldERhdGUoZC5nZXREYXRlKCkgKyBpKTtcclxuICAgICAgcG9pbnRzLnB1c2goeyBkYXRlOiBmb3JtYXREYXRlKGQpLCBtZWRpYW46IDAsIGxvd2VyOiAwLCB1cHBlcjogMCB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IHBvaW50cywgbWV0YTogeyBub3RlczogXCJubyBkYXRhXCIsIGF2Z01vbnRobHk6IDAsIHByb2plY3RlZE1vbnRobHk6IDAgfSB9O1xyXG4gIH1cclxuXHJcbiAgLy8gY29udmVydCB0byBhcnJheXMgZm9yIG51bWVyaWNhbCBvcHMgKGRhaWx5IG5ldCBmbG93cylcclxuICBjb25zdCB2YWx1ZXMgPSBkYXRlcy5tYXAoZCA9PiBtYXBbZF0pO1xyXG4gIGNvbnN0IG4gPSB2YWx1ZXMubGVuZ3RoO1xyXG4gIGNvbnN0IHhzID0gdmFsdWVzLm1hcCgoXyxpKSA9PiBpKTtcclxuXHJcbiAgLy8gMykgZml0IGxpbmVhciByZWdyZXNzaW9uIGZvciB0cmVuZFxyXG4gIGNvbnN0IHsgc2xvcGUsIGludGVyY2VwdCB9ID0gbGluZWFyUmVncmVzc2lvbih4cywgdmFsdWVzKTtcclxuXHJcbiAgLy8gNCkgd2Vla2RheSBzZWFzb25hbGl0eTogYXZlcmFnZSByZXNpZHVhbCBieSB3ZWVrZGF5XHJcbiAgY29uc3Qgd2Vla2RheVN1bXM6IG51bWJlcltdID0gWzAsMCwwLDAsMCwwLDBdO1xyXG4gIGNvbnN0IHdlZWtkYXlDb3VudDogbnVtYmVyW10gPSBbMCwwLDAsMCwwLDAsMF07XHJcbiAgZm9yIChsZXQgaT0wO2k8bjtpKyspe1xyXG4gICAgY29uc3QgZCA9IG5ldyBEYXRlKGRhdGVzW2ldKTtcclxuICAgIGNvbnN0IHcgPSBkLmdldERheSgpO1xyXG4gICAgY29uc3QgdHJlbmRBdEkgPSBpbnRlcmNlcHQgKyBzbG9wZSAqIGk7XHJcbiAgICBjb25zdCByZXNpZHVhbCA9IHZhbHVlc1tpXSAtIHRyZW5kQXRJO1xyXG4gICAgd2Vla2RheVN1bXNbd10gKz0gcmVzaWR1YWw7XHJcbiAgICB3ZWVrZGF5Q291bnRbd10gKz0gMTtcclxuICB9XHJcbiAgY29uc3Qgd2Vla2RheUF2ZyA9IHdlZWtkYXlTdW1zLm1hcCgocyxpKSA9PiB3ZWVrZGF5Q291bnRbaV0gPyBzL3dlZWtkYXlDb3VudFtpXSA6IDApO1xyXG5cclxuICAvLyA1KSBjb21wdXRlIHJlc2lkdWFscyBkaXN0cmlidXRpb24gKGFmdGVyIHJlbW92aW5nIHRyZW5kK3NlYXNvbmFsaXR5KVxyXG4gIGNvbnN0IHJlc2lkdWFsczogbnVtYmVyW10gPSBbXTtcclxuICBmb3IgKGxldCBpPTA7aTxuO2krKyl7XHJcbiAgICBjb25zdCBkID0gbmV3IERhdGUoZGF0ZXNbaV0pO1xyXG4gICAgY29uc3QgdyA9IGQuZ2V0RGF5KCk7XHJcbiAgICBjb25zdCBwcmVkID0gaW50ZXJjZXB0ICsgc2xvcGUgKiBpICsgd2Vla2RheUF2Z1t3XTtcclxuICAgIHJlc2lkdWFscy5wdXNoKHZhbHVlc1tpXSAtIHByZWQpO1xyXG4gIH1cclxuICBjb25zdCByZXNpZE1lYW4gPSByZXNpZHVhbHMucmVkdWNlKChhLGIpPT5hK2IsMCkvTWF0aC5tYXgoMSxyZXNpZHVhbHMubGVuZ3RoKTtcclxuICBjb25zdCByZXNpZFN0ZCA9IE1hdGguc3FydChyZXNpZHVhbHMucmVkdWNlKChhLGIpPT5hKyhiLXJlc2lkTWVhbikqKGItcmVzaWRNZWFuKSwwKS9NYXRoLm1heCgxLHJlc2lkdWFscy5sZW5ndGgtMSkpO1xyXG5cclxuICAvLyA2KSBwcmVkaWN0aXZlIG1lZGlhbiAoZGV0ZXJtaW5pc3RpYyB0cmVuZCtzZWFzb25hbGl0eSkgKyBNb250ZSBDYXJsbyBzaW1zXHJcbiAgY29uc3Qgc2ltcyA9IDMwMDtcclxuICBjb25zdCBydW5zOiBudW1iZXJbXVtdID0gW107IC8vIHNpbXVsYXRpb25zIHggZGF5c1xyXG4gIGZvciAobGV0IHM9MDtzPHNpbXM7cysrKXtcclxuICAgIGNvbnN0IHJ1bjogbnVtYmVyW10gPSBbXTtcclxuICAgIGZvciAobGV0IGk9MDtpPGRheXM7aSsrKXtcclxuICAgICAgLy8gZnV0dXJlIGluZGV4ID0gbiArIGlcclxuICAgICAgY29uc3QgaWR4ID0gbiArIGk7XHJcbiAgICAgIGNvbnN0IGJhc2UgPSBpbnRlcmNlcHQgKyBzbG9wZSAqIGlkeDtcclxuICAgICAgLy8gd2Vla2RheSBmb3IgZnV0dXJlIGRheVxyXG4gICAgICBjb25zdCBmdXREYXRlID0gbmV3IERhdGUoZGF0ZXNbZGF0ZXMubGVuZ3RoLTFdKTtcclxuICAgICAgZnV0RGF0ZS5zZXREYXRlKGZ1dERhdGUuZ2V0RGF0ZSgpICsgMSArIGkpO1xyXG4gICAgICBjb25zdCB3ID0gZnV0RGF0ZS5nZXREYXkoKTtcclxuICAgICAgY29uc3Qgc2Vhc29uYWwgPSB3ZWVrZGF5QXZnW3ddO1xyXG4gICAgICAvLyBzYW1wbGUgcmVzaWR1YWwgbm9pc2UsIGNsYW1wIHRvIMKxM8+DIGZvciBzdGFiaWxpdHlcclxuICAgICAgY29uc3Qgbm9pc2UgPSBNYXRoLm1heChNYXRoLm1pbihyYW5kbihyZXNpZE1lYW4sIHJlc2lkU3RkKSwgcmVzaWRTdGQqMyksIC1yZXNpZFN0ZCozKTtcclxuICAgICAgcnVuLnB1c2goYmFzZSArIHNlYXNvbmFsICsgbm9pc2UpO1xyXG4gICAgfVxyXG4gICAgcnVucy5wdXNoKHJ1bik7XHJcbiAgfVxyXG5cclxuICAvLyBjb21wdXRlIG1lZGlhbiBhbmQgaW50ZXJ2YWxzIGZvciBlYWNoIGRheVxyXG4gIGNvbnN0IHBvaW50czogRm9yZWNhc3RQb2ludFtdID0gW107XHJcbiAgZm9yIChsZXQgZGF5SWR4ID0gMDsgZGF5SWR4IDwgZGF5czsgZGF5SWR4KyspIHtcclxuICAgIGNvbnN0IHZhbHMgPSBydW5zLm1hcChyID0+IHJbZGF5SWR4XSkuc29ydCgoYSxiKT0+YS1iKTtcclxuICAgIGNvbnN0IG1lZGlhbiA9IHZhbHNbTWF0aC5mbG9vcih2YWxzLmxlbmd0aC8yKV07XHJcbiAgICBjb25zdCBsb3dlciA9IHZhbHNbTWF0aC5mbG9vcih2YWxzLmxlbmd0aCowLjA1KV07XHJcbiAgICBjb25zdCB1cHBlciA9IHZhbHNbTWF0aC5mbG9vcih2YWxzLmxlbmd0aCowLjk1KV07XHJcbiAgICBjb25zdCBmdXREYXRlID0gbmV3IERhdGUoZGF0ZXNbZGF0ZXMubGVuZ3RoLTFdKTtcclxuICAgIGZ1dERhdGUuc2V0RGF0ZShmdXREYXRlLmdldERhdGUoKSArIDEgKyBkYXlJZHgpO1xyXG4gICAgcG9pbnRzLnB1c2goeyBkYXRlOiBmb3JtYXREYXRlKGZ1dERhdGUpLCBtZWRpYW4sIGxvd2VyLCB1cHBlciB9KTtcclxuICB9XHJcblxyXG4gIC8vIGZvcmVjYXN0LWJhc2VkIHByb2plY3RlZCBtb250aGx5IChNQy1kcml2ZW4pIOKAlCBrZWVwIGZvciBkaWFnbm9zdGljc1xyXG4gIGNvbnN0IGZpcnN0MzAgPSBwb2ludHMuc2xpY2UoMCwgMzApO1xyXG4gIGNvbnN0IGZvcmVjYXN0RGFpbHlBdmcgPSBmaXJzdDMwLmxlbmd0aCA/IChmaXJzdDMwLnJlZHVjZSgocyxwKT0+cyArIChwLm1lZGlhbiA/PyAwKSwgMCkgLyBmaXJzdDMwLmxlbmd0aCkgOiAwO1xyXG4gIGNvbnN0IGZvcmVjYXN0UHJvamVjdGVkTW9udGhseU1DID0gZm9yZWNhc3REYWlseUF2ZyAqIDMwO1xyXG5cclxuICAvLyBmaW5hbCBwcm9qZWN0ZWRNb250aGx5IGZvciBVSTogdXNlIGNhdGVnb3J5LWJhc2VkIHByb2plY3Rpb24gKHN0YWJsZSArIHJlc3BvbnNpdmUgdG8gc2xpZGVycylcclxuICBjb25zdCBwcm9qZWN0ZWRNb250aGx5ID0gcHJvamVjdGVkTW9udGhseUJ5Q2F0ZWdvcnk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBwb2ludHMsXHJcbiAgICBtZXRhOiB7XHJcbiAgICAgIHNsb3BlLFxyXG4gICAgICBpbnRlcmNlcHQsXHJcbiAgICAgIHJlc2lkU3RkLFxyXG4gICAgICByZXNpZHVhbENvdW50OiByZXNpZHVhbHMubGVuZ3RoLFxyXG4gICAgICBhdmdNb250aGx5LFxyXG4gICAgICBwcm9qZWN0ZWRNb250aGx5LCAgICAgICAgICAgIC8vIHJlc3BvbnNpdmUsIHNsaWRlci1mcmllbmRseSBtb250aGx5IHByb2plY3Rpb25cclxuICAgICAgZm9yZWNhc3RQcm9qZWN0ZWRNb250aGx5TUMgICAvLyBNQy1iYXNlZCBtb250aGx5IChrZXB0IGZvciBkZWJ1Z2dpbmcvaW5zcGVjdGlvbilcclxuICAgIH1cclxuICB9O1xyXG59XHJcbiJdLCJuYW1lcyI6WyJwYXJzZURhdGVPbmx5IiwiZCIsInQiLCJEYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJmb3JtYXREYXRlIiwidG9JU09TdHJpbmciLCJzbGljZSIsImJ1aWxkRGFpbHlTZXJpZXNGcm9tVHJhbnNhY3Rpb25zIiwidHJhbnNhY3Rpb25zIiwibWFwIiwiZm9yRWFjaCIsImRheSIsImRhdGUiLCJhbW91bnQiLCJsaW5lYXJSZWdyZXNzaW9uIiwieHMiLCJ5cyIsIm4iLCJsZW5ndGgiLCJzbG9wZSIsImludGVyY2VwdCIsIm1lYW5YIiwicmVkdWNlIiwiYSIsImIiLCJtZWFuWSIsIm51bSIsImRlbiIsImkiLCJyYW5kbiIsIm1lYW4iLCJzdGQiLCJ1IiwidiIsIk1hdGgiLCJyYW5kb20iLCJzcXJ0IiwibG9nIiwiY29zIiwiUEkiLCJmb3JlY2FzdCIsImRheXMiLCJzY2VuYXJpbyIsInR4c09yaWdpbmFsIiwiTnVtYmVyIiwiYXZnTW9udGhseSIsImRhdGVzIiwibWluRGF0ZSIsIm1pbiIsImdldFRpbWUiLCJtYXhEYXRlIiwibWF4IiwibW9udGhzIiwidG90YWwiLCJzIiwibW9udGhzU3BhbiIsImNhdFRvdGFscyIsImNhdCIsImNhdGVnb3J5IiwidG9TdHJpbmciLCJ0cmltIiwiYmFzZWxpbmVNb250aGx5QnlDYXRlZ29yeSIsIk9iamVjdCIsImtleXMiLCJwcm9qZWN0ZWRNb250aGx5QnlDYXRlZ29yeSIsInN1bSIsIm11bHRpcGxpZXIiLCJ0eHNBZGp1c3RlZCIsInNvcnQiLCJwb2ludHMiLCJ0b2RheSIsInNldERhdGUiLCJwdXNoIiwibWVkaWFuIiwibG93ZXIiLCJ1cHBlciIsIm1ldGEiLCJub3RlcyIsInByb2plY3RlZE1vbnRobHkiLCJ2YWx1ZXMiLCJfIiwid2Vla2RheVN1bXMiLCJ3ZWVrZGF5Q291bnQiLCJ3IiwiZ2V0RGF5IiwidHJlbmRBdEkiLCJyZXNpZHVhbCIsIndlZWtkYXlBdmciLCJyZXNpZHVhbHMiLCJwcmVkIiwicmVzaWRNZWFuIiwicmVzaWRTdGQiLCJzaW1zIiwicnVucyIsInJ1biIsImlkeCIsImJhc2UiLCJmdXREYXRlIiwic2Vhc29uYWwiLCJub2lzZSIsImRheUlkeCIsInZhbHMiLCJyIiwiZmxvb3IiLCJmaXJzdDMwIiwiZm9yZWNhc3REYWlseUF2ZyIsInAiLCJmb3JlY2FzdFByb2plY3RlZE1vbnRobHlNQyIsInJlc2lkdWFsQ291bnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/forecast.ts\n");

/***/ }),

/***/ "(api)/./pages/api/forecast.ts":
/*!*******************************!*\
  !*** ./pages/api/forecast.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_forecast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/forecast */ \"(api)/./lib/forecast.ts\");\n\nasync function handler(req, res) {\n    if (req.method !== \"POST\") return res.status(405).end();\n    try {\n        const body = req.body;\n        const transactions = body.transactions ?? [];\n        const days = body.days ?? 365;\n        const scenario = body.scenario;\n        const result = await (0,_lib_forecast__WEBPACK_IMPORTED_MODULE_0__.forecast)(transactions, days, scenario);\n        res.status(200).json(result);\n    } catch (err) {\n        console.error(err);\n        res.status(500).json({\n            error: String(err?.message ?? err)\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvZm9yZWNhc3QudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDOEM7QUFHL0IsZUFBZUMsUUFBUUMsR0FBbUIsRUFBRUMsR0FBb0I7SUFDN0UsSUFBSUQsSUFBSUUsTUFBTSxLQUFLLFFBQVEsT0FBT0QsSUFBSUUsTUFBTSxDQUFDLEtBQUtDLEdBQUc7SUFDckQsSUFBSTtRQUNGLE1BQU1DLE9BQU9MLElBQUlLLElBQUk7UUFDckIsTUFBTUMsZUFBZUQsS0FBS0MsWUFBWSxJQUFJLEVBQUU7UUFDNUMsTUFBTUMsT0FBT0YsS0FBS0UsSUFBSSxJQUFJO1FBQzFCLE1BQU1DLFdBQVdILEtBQUtHLFFBQVE7UUFDOUIsTUFBTUMsU0FBUyxNQUFNWCx1REFBUUEsQ0FBQ1EsY0FBY0MsTUFBTUM7UUFDbERQLElBQUlFLE1BQU0sQ0FBQyxLQUFLTyxJQUFJLENBQUNEO0lBQ3ZCLEVBQUUsT0FBT0UsS0FBVTtRQUNqQkMsUUFBUUMsS0FBSyxDQUFDRjtRQUNkVixJQUFJRSxNQUFNLENBQUMsS0FBS08sSUFBSSxDQUFDO1lBQUVHLE9BQU9DLE9BQU9ILEtBQUtJLFdBQVdKO1FBQUs7SUFDNUQ7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpbmFuY2lhbC1kaWdpdGFsLXR3aW4vLi9wYWdlcy9hcGkvZm9yZWNhc3QudHM/Y2MzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tIFwibmV4dFwiO1xyXG5pbXBvcnQgeyBmb3JlY2FzdCB9IGZyb20gXCIuLi8uLi9saWIvZm9yZWNhc3RcIjtcclxuaW1wb3J0IHsgVHJhbnNhY3Rpb24sIFNjZW5hcmlvRGVsdGEgfSBmcm9tIFwiLi4vLi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UpIHtcclxuICBpZiAocmVxLm1ldGhvZCAhPT0gXCJQT1NUXCIpIHJldHVybiByZXMuc3RhdHVzKDQwNSkuZW5kKCk7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGJvZHkgPSByZXEuYm9keSBhcyB7IHRyYW5zYWN0aW9ucz86IFRyYW5zYWN0aW9uW107IGRheXM/OiBudW1iZXI7IHNjZW5hcmlvPzogU2NlbmFyaW9EZWx0YSB9O1xyXG4gICAgY29uc3QgdHJhbnNhY3Rpb25zID0gYm9keS50cmFuc2FjdGlvbnMgPz8gW107XHJcbiAgICBjb25zdCBkYXlzID0gYm9keS5kYXlzID8/IDM2NTtcclxuICAgIGNvbnN0IHNjZW5hcmlvID0gYm9keS5zY2VuYXJpbztcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZvcmVjYXN0KHRyYW5zYWN0aW9ucywgZGF5cywgc2NlbmFyaW8pO1xyXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24ocmVzdWx0KTtcclxuICB9IGNhdGNoIChlcnI6IGFueSkge1xyXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBlcnJvcjogU3RyaW5nKGVycj8ubWVzc2FnZSA/PyBlcnIpIH0pO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsiZm9yZWNhc3QiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwibWV0aG9kIiwic3RhdHVzIiwiZW5kIiwiYm9keSIsInRyYW5zYWN0aW9ucyIsImRheXMiLCJzY2VuYXJpbyIsInJlc3VsdCIsImpzb24iLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJTdHJpbmciLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./pages/api/forecast.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/forecast.ts"));
module.exports = __webpack_exports__;

})();